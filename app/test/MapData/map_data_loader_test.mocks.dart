// Mocks generated by Mockito 5.4.0 from annotations
// in app/test/MapData/map_data_loader_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:app/MapData/Loaders/database_loader.dart' as _i3;
import 'package:app/MapData/bus_running_dates.dart' as _i7;
import 'package:app/MapData/bus_time.dart' as _i6;
import 'package:app/MapData/feature.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i8;
import 'package:tuple/tuple.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTuple5_0<T1, T2, T3, T4, T5> extends _i1.SmartFake
    implements _i2.Tuple5<T1, T2, T3, T4, T5> {
  _FakeTuple5_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DatabaseLoader].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseLoader extends _i1.Mock implements _i3.DatabaseLoader {
  MockDatabaseLoader() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<
      _i2.Tuple5<
          Set<_i5.Feature>,
          Map<String, int>,
          Map<String, List<_i6.BusTime>>,
          Map<String, List<_i6.BusTime>>,
          _i7.BusRunningDates>> load() => (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValue: _i4.Future<
            _i2.Tuple5<
                Set<_i5.Feature>,
                Map<String, int>,
                Map<String, List<_i6.BusTime>>,
                Map<String, List<_i6.BusTime>>,
                _i7.BusRunningDates>>.value(_FakeTuple5_0<
            Set<_i5.Feature>,
            Map<String, int>,
            Map<String, List<_i6.BusTime>>,
            Map<String, List<_i6.BusTime>>,
            _i7.BusRunningDates>(
          this,
          Invocation.method(
            #load,
            [],
          ),
        )),
      ) as _i4.Future<
          _i2.Tuple5<
              Set<_i5.Feature>,
              Map<String, int>,
              Map<String, List<_i6.BusTime>>,
              Map<String, List<_i6.BusTime>>,
              _i7.BusRunningDates>>);
  @override
  _i4.Future<
      _i2.Tuple5<
          Set<_i5.Feature>,
          Map<String, int>,
          Map<String, List<_i6.BusTime>>,
          Map<String, List<_i6.BusTime>>,
          _i7.BusRunningDates>> loadData(_i8.Database? db) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadDatabase,
          [db],
        ),
        returnValue: _i4.Future<
            _i2.Tuple5<
                Set<_i5.Feature>,
                Map<String, int>,
                Map<String, List<_i6.BusTime>>,
                Map<String, List<_i6.BusTime>>,
                _i7.BusRunningDates>>.value(_FakeTuple5_0<
            Set<_i5.Feature>,
            Map<String, int>,
            Map<String, List<_i6.BusTime>>,
            Map<String, List<_i6.BusTime>>,
            _i7.BusRunningDates>(
          this,
          Invocation.method(
            #loadDatabase,
            [db],
          ),
        )),
      ) as _i4.Future<
          _i2.Tuple5<
              Set<_i5.Feature>,
              Map<String, int>,
              Map<String, List<_i6.BusTime>>,
              Map<String, List<_i6.BusTime>>,
              _i7.BusRunningDates>>);
}
